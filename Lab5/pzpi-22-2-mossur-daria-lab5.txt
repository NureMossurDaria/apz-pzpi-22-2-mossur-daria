Міністерство освіти і науки України
Харківський національний університет радіоелектроніки
Кафедра програмної інженерії





Лабораторна робота №5
з дисципліни: «Архітектура програмного забезпечення»
на тему: «Розробка програмної архітектури, створення і відлагодження програмного коду програмного застосунку мобільного пристрою для програмної системи»





Виконала:                                                                                                     
ст. гр. ПЗПІ-22-2                                                                                              
Моссур Дар'я Євгенівна                                                      
Перевірив:
ст. викладач кафедри ПІ
Сокорчук Ігор Петрович





Харків 2025
?
1 ІСТОРІЯ ЗМІН

№	Дата	Версія звіту	Опис змін
1	07.06.2025	0.1	Створення структури звіту, визначено завдання та терміни виконання
2	09.06.2025	0.1	Описано мету, хід роботи, зроблено висновки, заповнено додатки до роботи.

2 АНАЛІЗ ЗАВДАННЯ
	У межах поставленого завдання необхідно реалізувати мобільну частину програмної системи для донорства. Мобільний застосунок має забезпечити доступ до функціоналу для донорів, медичних працівників та адміністративного персоналу. Основна мета полягає у створенні зручного, швидкого та безпечного інтерфейсу, який дозволяє користувачам переглядати, додавати або змінювати інформацію відповідно до своєї ролі у системі. Особливу увагу приділено адаптивності під різні розміри екранів, підтримці багатомовності та інтеграції з серверною частиною через API.

3 ХІД РОБОТИ
	Робота над мобільним застосунком розпочалася з аналізу вимог до функціоналу та визначення ключових ролей користувачів. Було спроєктовано структуру екранів і навігації, враховуючи потреби кожної категорії користувачів. Реалізацію здійснено в середовищі Android Studio з використанням мови Kotlin. Створено окремі фрагменти для реєстрації, входу, перегляду подій донорства, історії донацій та адміністрування. Для взаємодії з сервером налаштовано обмін даними через REST API з використанням бібліотеки Retrofit. Реалізовано систему авторизації, обробки ролей, локалізації інтерфейсу, а також механізми захисту даних — зокрема, через SSL-пінінг і токенну автентифікацію.
?
	3.1. Архітектура мобільного застосунку для програмної системи
	Мобільна частина системи донорства побудована за архітектурним патерном MVVM (Model-View-ViewModel), який забезпечує чітке розділення відповідальностей між:
	- View (UI) — екрани, створені у вигляді Activity або Fragment, відповідають лише за відображення інтерфейсу та реакцію на взаємодію користувача.
	- ViewModel — зв’язує View з моделлю даних, обробляє події інтерфейсу, зберігає стан UI, не залежить від Android API, що полегшує тестування.
	- Model — логіка отримання та обробки даних. Вона включає роботу з мережею, локальними базами даних, DTO-об’єктами та бізнес-правилами.
	Архітектура організована у вигляді логічно відокремлених пакетів:
	- activity — містить UI-екрани для взаємодії з користувачем.
	- dto (Data Transfer Objects) - об’єкти, що використовуються для передачі даних між клієнтом і сервером.
	- request — API-клієнти (наприклад, на основі Retrofit), через які відбуваються мережеві запити.
	- service — обробка логіки запитів, кешування, обробка винятків, перетворення DTO в об’єкти доменної моделі.
	- utils — утилітарні класи, зокрема форматування дат, обробка повідомлень, тощо.
	- worker — реалізація WorkManager або фонових задач (нагадування, оновлення).
	- ui.theme — кастомізація вигляду додатку, зокрема тема, кольори, стилі.
	
	В рамках опису цього розділу до опису архітектури мобільного за стосунку було побудовано UML діаграму компонентів (Component Diagram), яка зображена на рисунку 3.1.
 
Рисунок 3.1 - UML діаграма компонентів (Component Diagram)

	3.2. Програмні технології та компоненти
	У мобільному додатку використовуються наступні технології:
	Мова програмування та середовище:
	- Kotlin, як основна мова розробки 
	- Android Studio — середовище розробки.
	- Gradle (KTS) — система збірки з використанням Kotlin DSL (build.gradle.kts).
	Бібліотеки та компоненти
	- Jetpack ViewModel, LiveData — реактивна робота з UI-станом.
	- Retrofit — бібліотека для HTTP-запитів.
	- Gson або Moshi — для серіалізації JSON.
	- WorkManager — для запуску фонових задач.
	- Material Components — для побудови адаптивного та сучасного інтерфейсу. 
	Також застосовуються й інші конфігурації, наприклад, libs.versions.toml, як централізоване управління залежностями; network_security_config.xml — обмеження доступу до дозволених серверів (SSL-пінінг, whitelist доменів).
3.3. Бізнес логіка, доступна у мобільній частині
	У мобільній частині системи реалізовано підтримку двох основних ролей: донор, медичний працівник. Для мобільного клієнта основний акцент зроблено на зручності використання, інтуїтивному інтерфейсі та забезпеченні повного спектру можливостей для кожної ролі без потреби використання сторонніх інструментів.
	Роль донора орієнтована на забезпечення простого доступу до функціоналу, пов’язаного із участю в подіях донації крові, переглядом історії та керуванням особистим профілем.
  	Основний функціонал включає:
 	 - Перегляд усіх запланованих подій у застосунку — користувач отримує список івентів, де вказано дату, час, місце, заклад, потреби у крові та її тип.
  	- Запис на подію здійснюється через інтуїтивний інтерфейс, який надсилає відповідний запит до серверу через API.
	  - Перегляд особистих записів — доступний розділ «Мої події», де відображаються всі майбутні й минулі події, на які донор був зареєстрований.
 	 - Скасування реєстрації — за наявності причин, донор може видалити свій запис до початку заходу.
  	Особисті налаштування реалізовані у вигляді окремого розділу, де користувач може:
 	 - Змінити пароль, скориставшись безпечною формою з клієнтською валідацією.
 	 - Змінити мову інтерфейсу (доступні українська та англійська).
 	 - Повністю видалити профіль, у разі чого персональні дані видаляються з бази, а інформація про попередні донації зберігається в анонімізованому вигляді.
  	Роль медичного працівника передбачає значно менший функціонал, ніж у веб частині. Загалом, через мобільний застосунок для медика доступні лише нотифікації, все інше відбувається з використанням веб.
  	Вся бізнес-логіка мобільного застосунку реалізована у вигляді Kotlin-компонентів із суворим розділенням відповідальностей за допомогою MVVM-архітектури. Комунікація з бекендом здійснюється через Retrofit з автоматичним додаванням JWT-токену до заголовків запиту за допомогою Interceptor. Клієнтська валідація форм реалізована через LiveData та custom input-валидації. На основі визначеної ролі користувача після входу застосунок динамічно формує доступний набір екранів та дій. Для відображення процесів і логіки роботи мобільного додатку створено діаграму діяльності (рисунок 3.2), Use Case diagram (Donor) - рисунок 3.3, діаграму станів (рисунок 3.4).

 
Рисунок 3.2 – UML діаграма діяльності (Activity Diagram)

 
Рисунок 3.3 – Use Case diagram (Donor)

 
Рисунок 3.4 – UML діаграма станів (State Diagram)



3.4. Захист даних у мобільному застосунку для програмної системи
Застосунок реалізує кілька рівнів безпеки для захисту персональних даних користувачів:
1. Безпечне з'єднання:
- HTTPS з використанням SSL/TLS. У конфігурації network_security_config.xml явно задано дозволені домени.
- Сертифікат cert.crt у папці res/raw використовується для SSL-пінінгу — захист від MITM-атак, перевірка достовірності сервера.
2. Захист локальних даних:
- SharedPreferences або EncryptedSharedPreferences — зберігання токенів доступу у зашифрованому вигляді.
3. Авторизація:
Використовується токенна система авторизації — JWT або подібні механізми.
- Токени автоматично додаються до HTTP-запитів (через Interceptor в Retrofit).
- Обробка невалідних токенів: автоматичний вихід із системи або запит на повторну авторизацію.	

3.5. Взаємодія мобільної частини з іншими компонентами системи
Мобільний застосунок взаємодіє з серверною частиною (backend API), яка виконує обробку логіки системи:
Канали взаємодії:
- REST API — всі запити надсилаються за допомогою HTTP (через Retrofit).
- Формати передачі — JSON (перетворення здійснюється через Gson або Moshi).
- Асинхронна обробка — через Coroutines або LiveData/Flow для роботи з відповідями без блокування UI.
Приклади запитів:
/api/user/register — реєстрація нового донора.
/api/donation/book — створення запиту на донацію.
/api/user/history — отримання історії візитів до клінік.
/api/message — отримання повідомлень про події/запити.

3.6. Підтримка інтерналізації
У мобільному застосунку для системи донорства реалізована повна підтримка інтерналізації, яка дає змогу змінювати мову інтерфейсу відповідно до мовних налаштувань пристрою користувача. Це досягається завдяки використанню ресурсних XML-файлів, у яких зберігаються всі текстові елементи, що відображаються на екрані. Основний файл strings.xml міститься в папці res/values для англійської мови та в окремій папці res/values-uk для української локалізації. Таким чином, застосунок підтримує лише дві мови — українську та англійську, але .
Усі текстові значення в коді не задаються жорстко, а витягуються через відповідні ресурси за допомогою методу getString(). Це дозволяє системі Android автоматично вибирати мову інтерфейсу, яка відповідає встановленій на пристрої користувача, без необхідності додаткової логіки перемикання мов на рівні застосунку. Такий підхід забезпечує масштабованість і зручність у додаванні нових мов у майбутньому, а також дозволяє забезпечити зручну та зрозумілу взаємодію користувача із системою незалежно від його мовних уподобань.

3.7. Реалізовані варіанти локалізації
	На момент розробки система підтримує дві мовні локалі, хоча структура реалізації дозволяє легко додати нові мови в майбутньому. Застосунок наразі підтримує наступні мови: українська (основна мова) — res/values-uk/strings.xml, англійська (альтернативна) — res/values/strings.xml. Кожен переклад підтримує елементи інтерфейсу (наприклад, кнопки, підписи, повідомлення), повідомлення про помилки, статуси та системні підказки, можливість розширення підтримки інших мов забезпечується додаванням нових values-xx/strings.xml.

3.8. Функціональність для налаштування та адміністрування 
У мобільному застосунку реалізовано розширену функціональність для налаштування та адміністрування, що дозволяє користувачам з відповідними правами доступу ефективно керувати ключовими елементами системи донорства безпосередньо зі смартфона. Після проходження автентифікації користувач отримує інтерфейс, адаптований до його ролі — зокрема, адміністративний або медичний персонал отримує розширені можливості управління.
Мобільний інтерфейс дозволяє створювати, редагувати та переглядати інформацію про лікарні, події донорства, користувачів системи, донорські записи, а також слідкувати за станом холодильників для зберігання крові. Завдяки зручному UI, орієнтованому на торкання, усі адміністративні дії виконуються швидко й інтуїтивно — без потреби у спеціальному навчанні чи використанні веб-панелей.
Медичні працівники можуть в реальному часі додавати дані про нові донації, оновлювати статуси зберігання крові, підтверджувати заявки донорів або відхиляти їх при необхідності. Взаємодія з сервером здійснюється через RESTful API, що забезпечує оперативну синхронізацію даних між усіма учасниками системи.
Важливо, що весь адміністративний функціонал суворо контролюється ролями користувачів: інтерфейс автоматично приховує функції, які не відповідають повноваженням поточного користувача. Це гарантує високий рівень захисту як з точки зору безпеки, так і з боку зручності використання — звичайні донори не бачитимуть жодних елементів, призначених для адміністрування.
Таким чином, мобільний застосунок не лише виконує роль інструмента доступу до інформації, а й забезпечує повноцінну платформу для гнучкого керування всіма аспектами системи донорства без потреби використання додаткових засобів або платформ.

?
ВИСНОВКИ
	В результаті виконаного завдання було реалізовано мобільну частину програмної системи для керування процесами донорства крові. Розроблений застосунок підтримує дві основні ролі користувачів — донора та медичного працівника, проте в основному розроблений для донора. Для донора передбачено зручний механізм реєстрації на події, перегляду історії участі, роботи з особистими налаштуваннями та нотифікаціями. 
	При розробці було використано сучасні технології Kotlin, Android SDK, MVVM-архітектуру, що забезпечило масштабованість, стабільність і зручність підтримки застосунку. Уся бізнес-логіка реалізована відповідно до принципів розділення відповідальності, з належною обробкою авторизації, валідації введення та взаємодії з API.
	Результатом роботи став повнофункціональний мобільний клієнт, здатний працювати незалежно від веб версії та забезпечувати користувачів (донорів) всіма необхідними інструментами для участі в донорській програмі. ?
ДОДАТОК А
Частини програмного коду для реалізації мобільного застосунку

AndroidMainfest.xml:

<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <uses-permission android:name="android.permission.INTERNET" />
    <uses-permission android:name="android.permission.POST_NOTIFICATIONS" />

    <application
        android:name=".BloodDoApplication"
        android:allowBackup="true"
        android:dataExtractionRules="@xml/data_extraction_rules"
        android:fullBackupContent="@xml/backup_rules"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:networkSecurityConfig="@xml/network_security_config"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.BloodDo"
        tools:targetApi="31">
        <activity
            android:name=".activity.NotificationsHistoryActivity"
            android:exported="false"
            android:label="@string/title_activity_notifications_history"
            android:theme="@style/Theme.BloodDo" />
        <activity
            android:name=".activity.MyDonationsActivity"
            android:exported="false"
            android:label="@string/title_activity_my_donations"
            android:theme="@style/Theme.BloodDo" />
        <activity
            android:name=".activity.MyDonationAppointmentsActivity"
            android:exported="false"
            android:label="@string/title_activity_my_donation_appointments"
            android:theme="@style/Theme.BloodDo" />
        <activity
            android:name=".activity.DonationRecommendationsActivity"
            android:exported="false"
            android:label="@string/title_activity_donation_recommendations"
            android:theme="@style/Theme.BloodDo" />
        <activity
            android:name=".activity.PiAgreementActivity"
            android:exported="false"
            android:label="@string/title_activity_pi_agreement"
            android:theme="@style/Theme.BloodDo" />
        <activity
            android:name=".activity.DonationAppointmentActivity"
            android:exported="false"
            android:label="@string/title_activity_donation_appointment"
            android:theme="@style/Theme.BloodDo" />
        <activity
            android:name=".activity.MainMenuActivity"
            android:exported="false"
            android:label="@string/title_activity_main_menu"
            android:theme="@style/Theme.BloodDo" />
        <activity
            android:name=".activity.LoginActivity"
            android:exported="true"
            android:label="@string/app_name"
            android:theme="@style/Theme.BloodDo">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
    </application>

</manifest>	

BloodDoApplication:

package ua.nure.mossurd.blooddonation

import android.app.Application
import android.app.NotificationChannel
import android.app.NotificationManager
import android.os.Build
import androidx.core.content.edit
import androidx.work.PeriodicWorkRequestBuilder
import androidx.work.WorkManager
import ua.nure.mossurd.blooddonation.misc.Constants
import ua.nure.mossurd.blooddonation.worker.NotificationsWorker

class BloodDoApplication : Application() {
    override fun onCreate() {
        super.onCreate()

        applicationContext.getSharedPreferences(Constants.BLOODDO_CONTEXT_PREFS, MODE_PRIVATE)
            ?.edit() { putString(Constants.BLOODDO_DONOR_DATA, null) }
        applicationContext.getSharedPreferences(Constants.BLOODDO_CONTEXT_PREFS, MODE_PRIVATE)
            ?.edit() { putString(Constants.BLOODDO_MEDIC_DATA, null) }
        applicationContext.getSharedPreferences(Constants.BLOODDO_CONTEXT_PREFS, MODE_PRIVATE)
            ?.edit() { putString(Constants.BLOODDO_TOKEN_NAME, null) }
        applicationContext.getSharedPreferences(Constants.BLOODDO_CONTEXT_PREFS, MODE_PRIVATE)
            ?.edit() { putString(Constants.BLOODDO_USER_NAME, null) }
        applicationContext.getSharedPreferences(Constants.BLOODDO_CONTEXT_PREFS, MODE_PRIVATE)
            ?.edit() { putString(Constants.BLOODDO_ROLES_NAME, null) }
        applicationContext.getSharedPreferences(Constants.BLOODDO_CONTEXT_PREFS, MODE_PRIVATE)
            ?.edit() { putString(Constants.BLOODDO_PI_AGREED, null) }
        applicationContext.getSharedPreferences(Constants.BLOODDO_CONTEXT_PREFS, MODE_PRIVATE)
            ?.edit() { putString(Constants.BLOODDO_SYSTEM_LANGUAGE, null) }

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val name = getString(R.string.default_notification_channel_name)
            val importance = NotificationManager.IMPORTANCE_HIGH
            val mChannel = NotificationChannel(Constants.DEFAULT_NOTIFICATION_CHANNEL, name, importance)
            val notificationManager = getSystemService(NOTIFICATION_SERVICE) as NotificationManager
            notificationManager.createNotificationChannel(mChannel)
        }

        val notificationRequest =
            PeriodicWorkRequestBuilder<NotificationsWorker>(Constants.NOTIFICATIONS_PING_TIME)
                .build()
        WorkManager.getInstance(applicationContext).enqueue(notificationRequest)
    }
}
